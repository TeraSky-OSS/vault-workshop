#!/bin/bash

########################
# include the magic
########################
. demo-magic.sh

# hide the evidence
clear
p "Vault SSH secret engine Demo - Signed SSH certificates."
TYPE_SPEED=80
p "The signed SSH certificates is the simplest and most powerful in terms of setup complexity and in terms of being platform agnostic. By leveraging Vault's powerful CA capabilities and functionality built into OpenSSH, clients can SSH into target hosts using their own local SSH keys."
pe "vault secrets enable -path=ssh-client-signer ssh"

p "Configure Vault with a CA for signing client keys using the /config/ca endpoint. If you do not have an internal CA, Vault can generate a keypair for you."
pe "vault write ssh-client-signer/config/ca generate_signing_key=true"
p "If you already have a keypair, specify the public and private key parts as part of the payload:"
p "vault write ssh-client-signer/config/ca
    private_key="..."
    public_key="...""

pe "vault read -field=public_key ssh-client-signer/config/ca"

p "Adding the public key generated by vault CA to all target host's SSH configuration."
p '
ssh ec2-user@${VAULT_DR} -i /home/ubuntu/.ssh/vault_demo.pem -- sudo curl -o /etc/ssh/trusted-user-ca-keys.pem $VAULT_ADDR/v1/ssh-client-signer/public_key
ssh ec2-user@${VAULT_DR} -i /home/ubuntu/.ssh/vault_demo.pem "sudo sed -i '\$a TrustedUserCAKeys /etc/ssh/trusted-user-ca-keys.pem' /etc/ssh/sshd_config"
ssh ec2-user@${VAULT_DR} -i /home/ubuntu/.ssh/vault_demo.pem -- sudo systemctl restart sshd.service
'
ssh ec2-user@${VAULT_DR} -i /home/ubuntu/.ssh/vault_demo.pem -- sudo curl -o /etc/ssh/trusted-user-ca-keys.pem $VAULT_ADDR/v1/ssh-client-signer/public_key
ssh ec2-user@${VAULT_DR} -i /home/ubuntu/.ssh/vault_demo.pem "sudo cp /etc/ssh/sshd_config /etc/ssh/sshd_config.bkp"
ssh ec2-user@${VAULT_DR} -i /home/ubuntu/.ssh/vault_demo.pem "sudo sed -i '\$a TrustedUserCAKeys /etc/ssh/trusted-user-ca-keys.pem' /etc/ssh/sshd_config"
ssh ec2-user@${VAULT_DR} -i /home/ubuntu/.ssh/vault_demo.pem -- sudo systemctl restart sshd.service


p "Creating a named Vault role for signing client keys."
p 'vault write ssh-client-signer/roles/my-role -<<"EOH"
{
  "algorithm_signer": "rsa-sha2-256",
  "allow_user_certificates": true,
  "allowed_users": "*",
  "allowed_extensions": "permit-pty,permit-port-forwarding",
  "default_extensions": {
    "permit-pty": ""
  },
  "key_type": "ca",
  "default_user": "ec2-user",
  "ttl": "30m0s"
}
EOH'

vault write ssh-client-signer/roles/my-role -<<"EOH"
{
  "algorithm_signer": "rsa-sha2-256",
  "allow_user_certificates": true,
  "allowed_users": "*",
  "allowed_extensions": "permit-pty,permit-port-forwarding",
  "default_extensions": {
    "permit-pty": ""
  },
  "key_type": "ca",
  "default_user": "ec2-user",
  "ttl": "30m0s"
}
EOH

p "Client SSH Authentication"
p "The following steps are performed by the client (user) that wants to authenticate to machines managed by Vault. These commands are usually run from the client's local workstation."

p "Locating or generating the client SSH public key. Usually this is ~/.ssh/id_rsa.pub. We do not have an SSH keypair so we will generate one"
pe "ssh-keygen -t rsa -C "user@example.com""

p "We will Ask Vault to sign our public key. This file usually ends in .pub and the contents begin with ssh-rsa ..."
p "vault write ssh-client-signer/sign/my-role
    public_key=@$HOME/.ssh/id_rsa.pub"
vault write ssh-client-signer/sign/my-role \
    public_key=@$HOME/.ssh/id_rsa.pub
p "The result will include the serial and the signed key. This signed key is another public key."

p "To customize the signing options, we can use a JSON payload:"
p 'vault write ssh-client-signer/sign/my-role -<<"EOH"
{
  "public_key": "ssh-rsa AAA...",
  "valid_principals": "my-user",
  "key_id": "custom-prefix",
  "extensions": {
    "permit-pty": "",
    "permit-port-forwarding": ""
  }
}
EOH'

p "now, we will Save the resulting signed, public key to disk. and Limit permissions as needed."
p "vault write -field=signed_key ssh-client-signer/sign/my-role
    public_key=@$HOME/.ssh/id_rsa.pub > $HOME/.ssh/id_rsa-cert.pub"
vault write -field=signed_key ssh-client-signer/sign/my-role \
    public_key=@$HOME/.ssh/id_rsa.pub > $HOME/.ssh/id_rsa-cert.pub

p "lets view the enabled extensions, principals, and metadata of the signed key"
pe "ssh-keygen -Lf $HOME/.ssh/id_rsa-cert.pub"

p "finally, lets SSH into the host machine using the signed key. we must supply both the signed public key from Vault and the corresponding private key as authentication to the SSH call."
p "ssh -i ~/.ssh/id_rsa ec2-user@${VAULT_DR}"
ssh -i ~/.ssh/id_rsa ec2-user@${VAULT_DR}

p "For an added layer of security, its also recommended enabling host key signing. This is used in conjunction with client key signing to provide an additional integrity layer. When enabled, the SSH agent will verify the target host is valid and trusted before attempting to SSH. This will reduce the probability of a user accidentally SSHing into an unmanaged or malicious machine."

p "full info and features of vault SSH secret engine can be found on the official vault documentations at:"
p "https://developer.hashicorp.com/vault/docs/secrets/ssh/signed-ssh-certificates"

p "Demo End."

ssh ec2-user@${VAULT_DR} -i /home/ubuntu/.ssh/vault_demo.pem "sudo cp /etc/ssh/sshd_config.bkp /etc/ssh/sshd_config"
ssh ec2-user@${VAULT_DR} -i /home/ubuntu/.ssh/vault_demo.pem -- sudo systemctl restart sshd.service
vault secrets disable ssh-client-signer
rm $HOME/.ssh/id_rsa.pub
rm $HOME/.ssh/id_rsa-cert.pub
rm $HOME/.ssh/id_rsa